#image: atlassian/default-image:4
image: docker:26.1.2

options:
  docker: true

definitions:
  services:
    docker:
      memory: 4096
  steps:
    - step: &deploy
        name: 'deploy'
        size: 2x
        #services:
        #  - docker
        script:
          # Env vars to set in bitbucket CI, just to centralize them
          - |
            export RANCHER_API_TOKEN=$RANCHER_API_TOKEN
            export RANCHER_API_URL=$RANCHER_API_URL
            export RANCHER_PROJECT_ID=$RANCHER_PROJECT_ID # To be found by exploring the Rancher API
            export RANCHER_DEPLOYMENT_NAME_API=${RANCHER_DEPLOYMENT_NAME_API} # To be found by exploring the Rancher API
            export RANCHER_DEPLOYMENT_NAME_FRONT=${RANCHER_DEPLOYMENT_NAME_FRONT} # To be found by exploring the Rancher API
            export HARBOR_REGISTRY=${HARBOR_REGISTRY}
            export HARBOR_USERNAME=$HARBOR_USERNAME
            export HARBOR_PASSWORD=$HARBOR_PASSWORD
            # Front values
            export API_URL=$API_URL
            export APP_NAME=$APP_NAME
            # Compose production mode
            export COMPOSE_MODE=production

          # Env vars not to be edited
          - |
            BITBUCKET_TAG_VERSION=${BITBUCKET_TAG#v} # Remove starting "v" if it exists
            BITBUCKET_TAG_VERSION=${BITBUCKET_TAG_VERSION#prod-v} # Remove starting "prod-v" if it exists
            BITBUCKET_TAG_VERSION=${BITBUCKET_TAG_VERSION#staging-v} # Remove starting "staging-v" if it exists

          # Avoid error:
          # authorization denied by plugin pipelines: --privileged=true is not allowed
          - export DOCKER_BUILDKIT=0
          # Install curl
          - apk add curl
          # Install jq
          - apk add jq

          # Fetch all branches and tags from the remote repository
          - git fetch --all --tags

          # Checkout the code at the tag level
          - git checkout $BITBUCKET_TAG
          # Build Docker images using docker-compose, and tag them
          # Api
          - cd api
          #- docker-compose -f ./docker-compose.yml build
          # Add more venv here: echo VENV="${VENV}" >> .env
          - echo DUMMY="DUMMY" > .env
          - sh docker/compose.sh build
          - docker tag actograph-v3-api:latest ${HARBOR_REGISTRY}/api:${BITBUCKET_TAG_VERSION}
          - cd ..
          # Front
          - cd front
          # *************************************************************************
          # It is mandatory to insert here the venv that will be used inside the compose
          # of the front
          # *************************************************************************
          - echo API_URL="${API_URL}" > .env
          - echo APP_NAME="${APP_NAME}" >> .env
          # Add more venv here: echo VENV="${VENV}" >> .env
          #- cat .env
          # *************************************************************************
          #- docker-compose -f ./docker/docker-compose.yml build
          - sh docker/compose.sh build
          - docker tag actograph-v3-front:latest ${HARBOR_REGISTRY}/front:${BITBUCKET_TAG_VERSION}
          - cd ..

          # Log in to Harbor Docker registry
          - docker login $HARBOR_REGISTRY --username $HARBOR_USERNAME --password $HARBOR_PASSWORD
          # Push the Docker image to Harbor
          - docker push $HARBOR_REGISTRY/api:${BITBUCKET_TAG_VERSION}

          # Log in to Harbor Docker registry
          - docker login $HARBOR_REGISTRY --username $HARBOR_USERNAME --password $HARBOR_PASSWORD
          # Push the Docker image to Harbor
          - docker push $HARBOR_REGISTRY/front:${BITBUCKET_TAG_VERSION}

          # ********************************************
          # Use API call to update Rancher deployment for API
          # ********************************************

          # Get the current deployment configuration
          - >-
            curl -X GET
            -H "Authorization: Bearer $RANCHER_API_TOKEN"
            "${RANCHER_API_URL}/project/${RANCHER_PROJECT_ID}/workloads/deployment:${RANCHER_DEPLOYMENT_NAME_API}"
            > deployment-api.json

          # Modify the container's image in the retrieved configuration
          - >-
            jq --arg newImage ${HARBOR_REGISTRY}/api:${BITBUCKET_TAG_VERSION} '.containers |= map(if .name == "container-0" then . + { "image": $newImage } else . end)' deployment-api.json > updated_deployment-api.json

          # Perform the PUT request with the updated container configuration
          - >-
            curl -X PUT
            -H "Authorization: Bearer $RANCHER_API_TOKEN"
            -H "Content-Type: application/json"
            -d @updated_deployment-api.json
            "${RANCHER_API_URL}/project/${RANCHER_PROJECT_ID}/workloads/deployment:${RANCHER_DEPLOYMENT_NAME_API}"

          # ********************************************
          # Use API call to update Rancher deployment for FRONT
          # ********************************************

          # Get the current container configuration
          - >-
            curl -X GET
            -H "Authorization: Bearer $RANCHER_API_TOKEN"
            "${RANCHER_API_URL}/project/${RANCHER_PROJECT_ID}/workloads/deployment:${RANCHER_DEPLOYMENT_NAME_FRONT}"
            > deployment-front.json

          # Modify the container's image in the retrieved configuration
          - >-
            jq --arg newImage ${HARBOR_REGISTRY}/front:${BITBUCKET_TAG_VERSION} '.containers |= map(if .name == "container-0" then . + { "image": $newImage } else . end)' deployment-front.json > updated_deployment-front.json

          # Perform the PUT request with the updated container configuration
          - >-
            curl -X PUT
            -H "Authorization: Bearer $RANCHER_API_TOKEN"
            -H "Content-Type: application/json"
            -d @updated_deployment-front.json
            "${RANCHER_API_URL}/project/${RANCHER_PROJECT_ID}/workloads/deployment:${RANCHER_DEPLOYMENT_NAME_FRONT}"

          # ********************************************

pipelines:
  tags:
    'v*': # Will trigger only for tags starting with "v"
      - step:
          <<: *deploy
          deployment: staging
    'prod-v*': # Will trigger only for tag starting with "prod-v"
      - step:
          <<: *deploy
          deployment: production
