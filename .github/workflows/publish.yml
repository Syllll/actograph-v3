name: Build and Publish Release

on:
  push:
    tags:
      - 'prod-v*.*.*'

jobs:
  build-and-upload:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
          - os: windows-latest
          - os: macos-13 # Intel x64 runner
            electron_arch_flags: "--x64"
          - os: macos-14 # Apple Silicon arm64 runner
            electron_arch_flags: "--arm64"
    runs-on: ${{ matrix.os }}
    environment: deploy
    permissions:
      contents: write 

    steps:
      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/prod-v}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Windows-only steps for certificate handling
      - name: Decode certificate
        if: matrix.os == 'windows-latest'
        run: |
          echo ${{ secrets.WIN_CERT_BASE64 }} > certificate.b64
          certutil -decode certificate.b64 front/certificate.pfx
        shell: bash

      - name: Replace security functions
        shell: bash
        env:
          PKV_GET_KEY_BYTE: ${{ secrets.PKVGETKEYBYTE }}
          PKV_CHECK_KEY: ${{ secrets.PKVCHECKKEY }}
        run: |
          node -e '
            const fs = require("fs");
            const filePath = "api/src/core/security/services/key-testor.ts";
            
            let content = fs.readFileSync(filePath, "utf8");
            
            // Replace each function
            const replacements = [
              {
                pattern: /private pkvGetKeyByte\(seed: ulint, a: ulint, b: ulint, c: ulint\): ulint {[\s\S]*?^  }/m,
                replacement: `private pkvGetKeyByte(seed: ulint, a: ulint, b: ulint, c: ulint): ulint {${process.env.PKV_GET_KEY_BYTE}}`
              },
              {
                pattern: /private pkvCheckKey\(s: string, blackListedKeys: string\[\] = \[\]\): KeyStatus {[\s\S]*?^  }/m,
                replacement: `private pkvCheckKey(s: string, blackListedKeys: string[] = []): KeyStatus {${process.env.PKV_CHECK_KEY}}`
              }
            ];
            
            for (const {pattern, replacement} of replacements) {
              content = content.replace(pattern, replacement);
            }
            
            fs.writeFileSync(filePath, content);
          '

      - name: Update package.json versions
        shell: bash
        run: |
          # Update API package.json
          jq '.version = "${{ steps.get_version.outputs.VERSION }}"' api/package.json > api/package.json.tmp
          mv api/package.json.tmp api/package.json
          
          # Update Frontend package.json
          jq '.version = "${{ steps.get_version.outputs.VERSION }}"' front/package.json > front/package.json.tmp
          mv front/package.json.tmp front/package.json

      - name: Create API .env file
        shell: bash
        run: |
          echo "# Container exposed ports on the host
          BACKEND_DOCKER_APP_PORT_EXPOSED=3044
          BACKEND_DOCKER_PSQL_PORT_EXPOSED=5644

          # BACK and FRONT URLS (ex. https://mydomain.com or http://localhost:3236)
          API_URL=http://localhost:3044
          FRONTEND_URL=http://localhost:8044

          # Name of the app, used in e-mails and in the frontend
          APP_NAME=actograph-v3-api

          # LOCAL DB
          DB_TYPE=sqlite #postgres
          DB_HOST=localhost #actograph-v3-api-dev-db
          DB_PORT=5432
          DB_USERNAME=${{ vars.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=actograph.sqlite # actograph db

          # Generate a strong (40 chars) random password using tools like https://www.dashlane.com/personal-password-manager/password-generator
          JWT_SECRET=s0me-10ng-and-rAnd0m-str1ng-here-t00

          # This will create the first admin user upon first start
          ADMINUSER_LOGIN=${{ vars.ADMINUSER_LOGIN }}
          ADMINUSER_PASSWORD=${{ secrets.ADMINUSER_PASSWORD }}

          # API
          ACTOGRAPH_API=${{ vars.ACTOGRAPH_API }}
          ACTOGRAPH_API_PASSWORD=${{ secrets.ACTOGRAPH_API_PASSWORD }}" > api/.env

      - name: Create Frontend .env file
        shell: bash
        run: |
          echo "FRONT_DOCKER_PORT_EXPOSED=8044
          API_URL=http://localhost:3044
          APP_NAME=actograph-v3
          # Modes = dark|light
          DEFAULT_COLOR_MODE=light" > front/.env

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel

      - name: Setup Yarn
        run: npm install -g yarn

      - name: Run deploy script
        run: bash scripts/build-electron.sh
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WIN_CERT_PWD: ${{ secrets.WIN_CERT_PWD }}
          ELECTRON_ARCH_FLAGS: ${{ matrix.electron_arch_flags }}

      # Clean up certificate for Windows only
      - name: Clean up certificate
        if: matrix.os == 'windows-latest' && always()
        run: |
          if exist certificate.pfx del /q certificate.pfx
          if exist certificate.b64 del /q certificate.b64
        shell: cmd

      # Instead of uploading to release here, let's save artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: electron-artifacts-${{ matrix.os }}
          path: |
            front/dist/electron/Packaged/*.exe
            front/dist/electron/Packaged/*.dmg
            front/dist/electron/Packaged/*.AppImage
            front/dist/electron/Packaged/*.snap
            front/dist/electron/Packaged/latest*.yml
            front/dist/electron/Packaged/latest*.yaml
            front/dist/electron/Packaged/*-mac.zip
            front/dist/electron/Packaged/*.blockmap

  create-release:
    needs: build-and-upload
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/prod-v}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Normalize mac update files to avoid duplicate names
        run: |
          if [ -f "artifacts/electron-artifacts-macos-14/latest-mac.yml" ]; then
            mv artifacts/electron-artifacts-macos-14/latest-mac.yml artifacts/electron-artifacts-macos-14/latest-mac-arm64.yml
          fi
          if [ -f "artifacts/electron-artifacts-macos-13/latest-mac.yml" ]; then
            mv artifacts/electron-artifacts-macos-13/latest-mac.yml artifacts/electron-artifacts-macos-13/latest-mac-x64.yml
          fi

      - name: Prepare release bundle (dedupe artifacts)
        run: |
          set -e
          mkdir -p artifacts/release
          # macOS x64 from macos-13
          if compgen -G "artifacts/electron-artifacts-macos-13/ActoGraph-v3-x64.dmg" > /dev/null; then
            cp -f artifacts/electron-artifacts-macos-13/ActoGraph-v3-x64.dmg artifacts/release/
          fi
          if compgen -G "artifacts/electron-artifacts-macos-13/ActoGraph-v3-x64.dmg.blockmap" > /dev/null; then
            cp -f artifacts/electron-artifacts-macos-13/ActoGraph-v3-x64.dmg.blockmap artifacts/release/
          fi
          if compgen -G "artifacts/electron-artifacts-macos-13/latest-mac-x64.yml" > /dev/null; then
            cp -f artifacts/electron-artifacts-macos-13/latest-mac-x64.yml artifacts/release/
          fi
          # macOS arm64 from macos-14
          if compgen -G "artifacts/electron-artifacts-macos-14/ActoGraph-v3-arm64.dmg" > /dev/null; then
            cp -f artifacts/electron-artifacts-macos-14/ActoGraph-v3-arm64.dmg artifacts/release/
          fi
          if compgen -G "artifacts/electron-artifacts-macos-14/ActoGraph-v3-arm64.dmg.blockmap" > /dev/null; then
            cp -f artifacts/electron-artifacts-macos-14/ActoGraph-v3-arm64.dmg.blockmap artifacts/release/
          fi
          if compgen -G "artifacts/electron-artifacts-macos-14/latest-mac-arm64.yml" > /dev/null; then
            cp -f artifacts/electron-artifacts-macos-14/latest-mac-arm64.yml artifacts/release/
          fi
          # Linux
          if compgen -G "artifacts/electron-artifacts-ubuntu-latest/*.AppImage" > /dev/null; then
            cp -f artifacts/electron-artifacts-ubuntu-latest/*.AppImage artifacts/release/
          fi
          if compgen -G "artifacts/electron-artifacts-ubuntu-latest/latest-linux.yml" > /dev/null; then
            cp -f artifacts/electron-artifacts-ubuntu-latest/latest-linux.yml artifacts/release/
          fi
          # Windows
          if compgen -G "artifacts/electron-artifacts-windows-latest/*.exe" > /dev/null; then
            cp -f artifacts/electron-artifacts-windows-latest/*.exe artifacts/release/
          fi
          if compgen -G "artifacts/electron-artifacts-windows-latest/*.exe.blockmap" > /dev/null; then
            cp -f artifacts/electron-artifacts-windows-latest/*.exe.blockmap artifacts/release/
          fi
          if compgen -G "artifacts/electron-artifacts-windows-latest/latest.yml" > 
            /dev/null; then
            cp -f artifacts/electron-artifacts-windows-latest/latest.yml artifacts/release/
          fi

      - name: Setup Node.js (for YAML merge)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install js-yaml in release folder
        run: |
          set -e
          mkdir -p artifacts/release
          cd artifacts/release
          npm init -y >/dev/null 2>&1 || true
          npm install js-yaml

      - name: Merge mac update YAML into latest-mac.yml
        run: |
          set -e
          cd artifacts/release
          if [ -f latest-mac-x64.yml ] && [ -f latest-mac-arm64.yml ]; then
            echo "Merging mac YAMLs into latest-mac.yml"
            node -e '
              const fs = require("fs");
              const yaml = require("js-yaml");
              const x64 = yaml.load(fs.readFileSync("latest-mac-x64.yml", "utf8"));
              const arm = yaml.load(fs.readFileSync("latest-mac-arm64.yml", "utf8"));
              const merged = { ...x64 };
              merged.files = [...(x64.files || []), ...(arm.files || [])];
              fs.writeFileSync("latest-mac.yml", yaml.dump(merged));
            '
          elif [ -f latest-mac-x64.yml ]; then
            cp latest-mac-x64.yml latest-mac.yml
          elif [ -f latest-mac-arm64.yml ]; then
            cp latest-mac-arm64.yml latest-mac.yml
          fi
        shell: bash

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: actograph-v3 v${{ steps.get_version.outputs.VERSION }}
          tag_name: actograph-v3_v${{ steps.get_version.outputs.VERSION }}
          files: artifacts/release/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
